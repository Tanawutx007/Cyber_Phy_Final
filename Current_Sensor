/*
  ACS712 Current Sensor Calibration & Measurement
  ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö ACS712 ‡∏£‡∏∏‡πà‡∏ô 5A / 20A / 30A
  ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢ ChatGPT üí°
*/

#if defined(ESP32)
  #define CURRENT_PIN 27   // ADC ‡∏Ç‡∏≤ 34 (ESP32)
  const float ADC_REF = 3.3;    // ESP32 ‡πÉ‡∏ä‡πâ 3.3V
  const int ADC_MAX = 4095;     // 12-bit ADC
#else
  #define CURRENT_PIN A0    // ‡∏Ç‡∏≤ A0 (Arduino UNO)
  const float ADC_REF = 5.0;    // UNO ‡πÉ‡∏ä‡πâ 5V
  const int ADC_MAX = 1023;     // 10-bit ADC
#endif

// üîπ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
const float SENSITIVITY = 0.185;   // 0.185 V/A ‚Üí ‡∏£‡∏∏‡πà‡∏ô 5A
// const float SENSITIVITY = 0.100; // ‡∏£‡∏∏‡πà‡∏ô 20A
// const float SENSITIVITY = 0.066; // ‡∏£‡∏∏‡πà‡∏ô 30A

float zeroOffset = 0;  // ‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏´‡∏≤‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï)

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("\n=== ACS712 Current Sensor Calibration ===");
  Serial.println("1Ô∏è‚É£ ‡∏ñ‡∏≠‡∏î‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏Å (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÅ‡∏™)");
  Serial.println("2Ô∏è‚É£ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'cal' ‡πÅ‡∏•‡πâ‡∏ß Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏®‡∏π‡∏ô‡∏¢‡πå");
  Serial.println("3Ô∏è‚É£ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'run' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏£‡∏¥‡∏á");
}

void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();

    if (cmd == "cal") {
      zeroOffset = calibrateZero();
      Serial.print("‚úÖ Zero Offset (V) = ");
      Serial.println(zeroOffset, 4);
      Serial.println("‡∏û‡∏¥‡∏°‡∏û‡πå 'run' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™");
    }

    else if (cmd == "run") {
      Serial.println("üîå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏£‡∏¥‡∏á (Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)");
      while (true) {
        float current = readCurrent();
        Serial.printf("Current: %.3f A\n", current);
        delay(500);
      }
    }
  }
}

// -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏®‡∏π‡∏ô‡∏¢‡πå --------------------
float calibrateZero() {
  Serial.println("üåÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï... (‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 1000 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)");
  long sum = 0;
  for (int i = 0; i < 1000; i++) {
    sum += analogRead(CURRENT_PIN);
    delay(2);
  }
  float avg = sum / 1000.0;
  float Vout = (avg / ADC_MAX) * ADC_REF;
  return Vout;
}

// -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™ --------------------
float readCurrent() {
  const int N = 50;  // ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡πà‡∏≤ 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  long sum = 0;
  for (int i = 0; i < N; i++) {
    sum += analogRead(CURRENT_PIN);
    delay(2);
  }
  float avg = sum / (float)N;
  float Vout = (avg / ADC_MAX) * ADC_REF;

  // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏£‡∏¥‡∏á (‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö)
  float I = (Vout - zeroOffset) / SENSITIVITY;
  return I;
}
